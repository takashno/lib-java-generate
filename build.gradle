plugins {
	id 'java'
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'signing'
	id 'maven'
	id 'maven-publish'
	id 'jacoco'
	id "com.diffplug.gradle.spotless"
}

ext {
	// バージョン定義
	versionMajor = 0
	versionMinor = 0
	versionPatch = 3

	// アーティファクト関連
	group 'com.t-zomu.libs'
	version "${versionMajor}.${versionMinor}.${versionPatch}"

	// Document
	siteUrl = 'https://github.com/takashno/lib-java-generate'

	// SCM（GitHub）
	githubUrl = 'https://github.com/takashno/lib-java-generate'

	// Sonatype Repo Urls
	releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
	snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"

	// developper
	developperId = 'takashno'
	developperName = 'Nozomu Takashima'
	developperEmail = 'epion.tropic.test.tool@gmail.com'
}

repositories {
	mavenCentral()
}

dependencies {

	api group: 'com.github.spullara.mustache.java', name: 'compiler', version: '0.8.18'

	api group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

	api group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'

    api group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'

	// ソースコードフォーマッター
    api 'com.google.googlejavaformat:google-java-format:1.3'

	// For Develop
	compileOnly 'org.projectlombok:lombok:1.18.6'
	annotationProcessor 'org.projectlombok:lombok:1.18.6'

}

// JavaDoc
tasks.withType(Javadoc) {
	options.charSet = 'UTF-8'
	options.encoding = 'UTF-8'
	options.addBooleanOption('Xdoclint:none', true)
}

// Java
tasks.withType(JavaCompile) {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	it.options.encoding = 'UTF-8'
}

java {
	withJavadocJar()
	withSourcesJar()
}

spotless {
	java {
		enforceCheck = true
		licenseHeaderFile rootProject.file('./formatter/LICENSE')
		eclipse().configFile rootProject.file('./formatter/formatter.xml')
		lineEndings 'UNIX'
	}
}

// CodeCov
task codeCoverageReport(type: JacocoReport) {
	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

	subprojects.each {
		sourceSets it.sourceSets.main
	}

	reports {
		xml.enabled true
		xml.destination project.file("${buildDir}/reports/jacoco/report.xml")
		html.enabled false
		csv.enabled false
	}
}

codeCoverageReport.dependsOn {
	subprojects*.test
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.name
			version = project.hasProperty('snapshot') ? project.version + '-SNAPSHOT' : project.version
			from components.java
			pom {
				name = project.name
				description = "java code generate library"
				url = "https://github.com/takashno/${project.name}"
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = project.developperId
						name = project.developperName
						email = project.developperEmail
					}
				}
				scm {
					connection = "scm:git:git://github.com/takashno/${project.name}.git"
					developerConnection = "git@github.com:takashno/${project.name}.git"
					url = "${project.githubUrl}"
				}
			}
		}
	}
	repositories {
		maven {
			name="OSSRH"
			url = project.hasProperty('snapshot') ? project.snapshotsRepoUrl : project.releasesRepoUrl
			def sonatypeUser = project.hasProperty('sonatypeUser') ? project.property('sonatypeUser') : System.getenv('MAVEN_USERNAME')
			def sonatypePassword = project.hasProperty('sonatypePassword') ? project.property('sonatypePassword') : System.getenv('MAVEN_PASSWORD')
			credentials {
				username = sonatypeUser
				password = sonatypePassword
			}
		}
	}
}

signing {
	sign publishing.publications.mavenJava
}

javadoc {
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}
